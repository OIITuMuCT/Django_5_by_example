Chapter01
•   Installing Python
•   Creating a Python virtual environment
•   Installing Django
•   Creating and configuring a Django project
•   Building a Django application
•   Designing data models
•   Creating and applying model migrations
•   Setting up an administration site for your models
•   Working with QuerySets and model managers
•   Building views, templates, and URLs
•   Understanding the Django request/response cycle

Chapter02
•   Using canonical URLs for models
•   Creating SEO-friendly URLs for posts
•   Adding pagination to the post list view
•   Building class-based views
•   Sending emails with Django
•   Using Django forms to share posts via email
•   Adding comments to posts using forms from models

Chapter03
•   Implementing tagging using django-taggit
•   Retrieving posts by similarity
•   Creating custom template tags and filters to display the latest posts and most commented posts
•   Adding a sitemap to the site
•   Creating feeds for blog posts
•   Installing PostgreSQL
•   Using fixtures to dump and load data into the database
•   Implementing a full-text search engine with Django and PostgreSQL

Chapter04
•   An authentication system for users to register, log in, edit their profile, and change or reset
their password
•   Social authentication to sign in with services such as Google
•   Functionality to display shared images and a system for users to share images from any website
•   An activity stream that allows users to see the content uploaded by the people that they follow
•   A follow system to allow users to follow each other on the website

Chapter05
•   Using the messages framework
•   Building a custom authentication backend
•   Preventing users from using an existing email
•   Adding social authentication with Python Social Auth
•   Running the development server through HTTPS using Django Extensions
•   Adding authentication using GitHub
•   Creating a profile for users that register with social authentication

Chapter06
•   Creating many-to-many relationships
•   Customizing behavior for forms
•   Using JavaScript with Django
•   Building a JavaScript bookmarklet
•   Generating image thumbnails using easy-thumbnails
•   Implementing asynchronous HTTP requests with JavaScript and Django
•   Building infinite scroll pagination

Chapter07
•   Building a follow system
•   Creating many-to-many relationships with an intermediate model
•   Creating an activity stream application
•   Adding generic relations to models
•   Optimizing QuerySets for related objects
•   Using signals for denormalizing counts
•   Using Django Debug Toolbar to obtain relevant debug information
•   Counting image views with Redis
•   Creating a ranking of the most viewed images with Redis

Chapter12
•   Create models for the CMS
•   Create fixtures for your models and apply them
•   Use model inheritance to create data models for polymorphic content
•   Create custom model fields
•   Order course contents and modules
•   Build authentication views for the CMS

Chapter13
•   Create a content management system (CMS) using class-based views and mixins
•   Build formsets and model formsets to edit course modules and module contents
•   Manage groups and permissions
•   Implement a drag-and-drop functionality to reorder modules and content

Chapter14
•   Create public views for displaying course information
•   Build a student registration system
•   Manage student enrollment in courses
•   Render diverse content for course modules
•   Install and configure Memcached
•   Cache content using the Django cache framework
•   Use the Memcached and Redis cache backends
•   Monitor your Redis server in the Django administration site

Chapter15
•   Install Django REST framework
•   Create serializers for your models
•   Build a RESTful API
•   Implement serializer method fields
•   Create nested serializers
•   Implement ViewSet views and routers
•   Build custom API views
•   Handle API authentication
•   Add permissions to API views
•   Create custom permissions
•   Use the Requests library to consume the API

Chapter16
•   Add Channels to your project
•   Build a WebSocket consumer and appropriate routing
•   Implement a WebSocket client
•   Enable a channel layer with Redis
•   Make your consumer fully asynchronous
•   Persist chat messages into the database

Chapter17
•   Configuring Django settings for multiple environments
•   Using Docker Compose to run multiple services
•   Setting up a web server with uWSGI and Django
•   Serving PostgreSQL and Redis with Docker Compose
•   Using the Django system check framework
•   Serving NGINX with Docker
•   Serving static assets through NGINX
•   Securing connections through Transport Layer Security (TLS) / Secure Sockets Layer (SSL)
•   Using the Daphne Asynchronous Server Gateway Interface (ASGI) server for Django Channels
•   Creating a custom Django middleware
•   Implementing custom Django management commands